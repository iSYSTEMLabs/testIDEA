<?xml version="1.0" encoding="UTF-8" ?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="https://resources.isystem.com/itest_report"
           xmlns="https://resources.isystem.com/itest_report"
           elementFormDefault="qualified">

  <!--
       This XML schema defines contents of test reports generated by testIDEA.

       Copyright: 2012 iSYSTEM Labs d.o.o.
  -->

 <xs:element name="reportDoc">
 <xs:annotation>
 	<xs:documentation>Root element of test report.</xs:documentation>
 </xs:annotation>

 <xs:complexType> <xs:sequence>
    <xs:element name="main"> <xs:complexType> <xs:sequence>
      <xs:element name="reportConfig"> <xs:complexType> <xs:sequence>

        <xs:element name="testIDEAVersion" type="isysVersion"/>
        <xs:element name="winIDEAVersion" type="isysVersion"/>

        <!-- if missing it means full report, present only when only errors are in the report -->
        <xs:element name="reportContents" type="xs:string" minOccurs="0"/> 

        <xs:element name="outFormat" type="xs:string" fixed="xml"/>
        <xs:element name="fileName" type="xs:string"/>
        <xs:element name="iyamlFileName" type="xs:string"/>

        <xs:element name="xsltFull" type="xs:string" minOccurs="0"/>

        <xs:element name="xmlLogoImage" type="xs:string" minOccurs="0" default=""/>
        <xs:element name="xmlReportHeader" type="xs:string" minOccurs="0"  default=""/>
        <xs:element name="cssFile" type="xs:string" minOccurs="0"/>

        <xs:element name="csvSeparator" type="xs:string" minOccurs="0"/>
        <xs:element name="isCSVHeaderLine" type="xs:boolean" minOccurs="0" default="false"/>
        <xs:element name="isXLSVerticalHeader" type="xs:boolean" minOccurs="0" default="false"/>
        <xs:element name="isIncludeTestSpec" type="xs:boolean" minOccurs="0" default="false"/>
        <xs:element name="isAbsPathForLinks" type="xs:boolean" minOccurs="0" default="false"/>

        <xs:element name="htmlViewMode">
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:enumeration value="all"/>
              <xs:enumeration value="errorsOnly"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:element>

        <xs:element name="testInfo" type="keyValuePair" minOccurs="0"/>

      </xs:sequence> </xs:complexType> </xs:element>


      <!-- Report statistics. -->

      <xs:element name="reportStatistic"> <xs:complexType> <xs:sequence>

            <xs:element name="noOfTests" type="xs:integer"/>
            <xs:element name="allErrors" type="xs:integer"/>
            <!-- how many test did not execute because of bug in test
                 case or environment or timeout - no test results are available -->
            <xs:element name="exceptionErrors" type="xs:integer"/>
            <!-- how many tests returned reslts which differ from
                 expected ones -->
            <xs:element name="failures" type="xs:integer"/>
            <xs:element name="expressionErrors" type="xs:integer"/>
            <xs:element name="coverageErrors" type="xs:integer"/>
            <xs:element name="codeProfilerErrors" type="xs:integer"/>
            <xs:element name="dataProfilerErrors" type="xs:integer"/>
            <xs:element name="scriptErrors" type="xs:integer"/>
            <xs:element name="stubErrors" type="xs:integer"/>
            <xs:element name="testPointErrors" type="xs:integer"/>
            <xs:element name="stackUsageErrors" type="xs:integer"/>
      </xs:sequence> </xs:complexType> </xs:element>


      <!-- Results of test groups. -->

      <xs:element name="groupResult" minOccurs="0" maxOccurs="unbounded"> <xs:complexType> <xs:sequence>
            <xs:element name="id" type="xs:string" minOccurs="0"/>
            <xs:element name="desc" type="xs:string" minOccurs="0"/>
            <xs:element name="resultComment" type="xs:string"/>
            <xs:element name="isGroupError" type="xs:integer"/>
            <xs:element name="isGroupException" type="xs:integer"/>
            <xs:element name="failedSections" type="xs:string"/>

            <xs:element name="filter" minOccurs="0"> <xs:complexType> <xs:sequence>
                  <xs:element name="filterId" type="xs:string" minOccurs="0"/>
                  <xs:element name="type" type="xs:string" minOccurs="0"/>

                  <xs:element name="coreId" type="xs:string" minOccurs="0"/>
                  <xs:element name="partitions" type="stringList" minOccurs="0"/>
                  <xs:element name="modules" type="stringList" minOccurs="0"/>

                  <xs:element name="includedIds" type="stringList" minOccurs="0"/>
                  <xs:element name="excludedIds" type="stringList" minOccurs="0"/>
                  <xs:element name="includedFunctions" type="stringList" minOccurs="0"/>
                  <xs:element name="excludedFunctions" type="stringList" minOccurs="0"/>

                  <xs:element name="mustHaveAllTags" type="stringList" minOccurs="0"/>
                  <xs:element name="mustHaveOneOfTags" type="stringList" minOccurs="0"/>
                  <xs:element name="mustNotHaveAllTags" type="stringList" minOccurs="0"/>
                  <xs:element name="mustNotHaveOneOfTags" type="stringList" minOccurs="0"/>

                  <xs:element name="isOr1" type="xs:boolean" minOccurs="0"/>
                  <xs:element name="isOr2" type="xs:boolean" minOccurs="0"/>
                  <xs:element name="isOr3" type="xs:boolean" minOccurs="0"/>

                  <xs:element name="scriptFunction" type="xs:string" minOccurs="0"/>
                  <xs:element name="scriptFunctionParams" type="stringList" minOccurs="0"/>
            </xs:sequence> </xs:complexType> </xs:element>

            <xs:element name="resultData" minOccurs="0"> <xs:complexType> <xs:sequence>
                  <xs:element name="noOfTestCasesInGroup" type="xs:integer" minOccurs="0"/>
                  <xs:element name="noOfFunctionsInGroup" type="xs:integer" minOccurs="0"/>
                  <xs:element name="noOfModulesInGroup" type="xs:integer" minOccurs="0"/>
                  <xs:element name="noOfPartitionsInGroup" type="xs:integer" minOccurs="0"/>

                  <xs:element name="exception" type="xs:string" minOccurs="0"/>

                  <xs:element name="passedTestCases" type="xs:integer" minOccurs="0"/>
                  <xs:element name="failedTestCases" type="xs:integer" minOccurs="0"/>
                  <xs:element name="errorTestCases" type="xs:integer" minOccurs="0"/>

                  <xs:element name="passedFunctions" type="xs:integer" minOccurs="0"/>
                  <xs:element name="failedFunctions" type="xs:integer" minOccurs="0"/>
                  <xs:element name="errorFunctions" type="xs:integer" minOccurs="0"/>

                  <xs:element name="passedModules" type="xs:integer" minOccurs="0"/>
                  <xs:element name="failedModules" type="xs:integer" minOccurs="0"/>
                  <xs:element name="errorModules" type="xs:integer" minOccurs="0"/>

                  <xs:element name="passedPartitions" type="xs:integer" minOccurs="0"/>
                  <xs:element name="failedPartitions" type="xs:integer" minOccurs="0"/>
                  <xs:element name="errorPartitions" type="xs:integer" minOccurs="0"/>

                  <xs:element name="failedPrecond" type="xs:integer" minOccurs="0"/>
                  <xs:element name="failedAssert" type="xs:integer" minOccurs="0"/>
                  <xs:element name="failedCoverage" type="xs:integer" minOccurs="0"/>
                  <xs:element name="failedProfilerCode" type="xs:integer" minOccurs="0"/>
                  <xs:element name="failedProfilerData" type="xs:integer" minOccurs="0"/>
                  <xs:element name="failedStub" type="xs:integer" minOccurs="0"/>
                  <xs:element name="failedTestPoint" type="xs:integer" minOccurs="0"/>
                  <!-- xs:element name="failedStackUsage" type="xs:integer" minOccurs="0"/ -->
                  <xs:element name="failedTargetExecptions" type="xs:integer" minOccurs="0"/>

                  <xs:element name="resultComment" type="xs:string" minOccurs="0"/>
                  <xs:element name="defaultDownloadFile" type="xs:string" minOccurs="0"/>

                  <xs:element name="minTestCasesForFunc" type="xs:integer" minOccurs="0"/>
                  <xs:element name="avgTestCasesForFunc" type="xs:float" minOccurs="0"/>
                  <xs:element name="maxTestCasesForFunc" type="xs:integer" minOccurs="0"/>

                  <xs:element name="funcsWTestCases" type="xs:integer" minOccurs="0"/>
                  <xs:element name="modulesWTestCases" type="xs:integer" minOccurs="0"/>
                  <xs:element name="partitionsWTestCases" type="xs:integer" minOccurs="0"/>

                  <xs:element name="scriptOutput" type="keyValuePair" minOccurs="0"/>
                  <xs:element name="scriptErrors" type="keyValuePair" minOccurs="0"/>

                  <xs:element name="testCasesPerModule" type="keyValuePair" minOccurs="0"/>
                  <xs:element name="testCasesPerPartition" type="keyValuePair" minOccurs="0"/>

                  <xs:element name="analyzerFile" type="xs:string" minOccurs="0"/>
                  <xs:element name="cvrgExportFile" type="xs:string" minOccurs="0"/>

                  <xs:element name="coverageAll" type="groupCoverage" minOccurs="0"/>
                  <xs:element name="coverageTestedOnly" type="groupCoverage" minOccurs="0"/>

                  <xs:element name="funcStats" type="functionStatistics" minOccurs="0"/>
            </xs:sequence> </xs:complexType> </xs:element>

      </xs:sequence> </xs:complexType> </xs:element>


      <!-- Results of test cases. -->

      <xs:element name="testResult" maxOccurs="unbounded"> <xs:complexType> <xs:sequence>

            <!-- Result summary. -->

            <xs:element name="testId" type="xs:string" minOccurs="0"/>
            <xs:element name="function" type="xs:string"/>
            <xs:element name="description" type="xs:string" minOccurs="0"/>
            <xs:element name="tags" type="xs:string" minOccurs="0"/>
            <xs:element name="baseTests" type="xs:string"/>
            <xs:element name="isError" type="xs:boolean"/>
            <xs:element name="isPreConditionError" type="xs:boolean"/>
            <xs:element name="isExprError" type="xs:boolean"/>
            <xs:element name="isTargetExceptionError" type="xs:boolean"/>
            <xs:element name="targetExceptionStr" type="xs:string"/>
            <xs:element name="isException" type="xs:boolean"/>
            <xs:element name="exceptionStr" type="xs:string"/>
            <xs:element name="isCoverageError" type="xs:boolean"/>
            <xs:element name="isProfilerCodeError" type="xs:boolean"/>
            <xs:element name="isProfilerDataError" type="xs:boolean"/>
            <xs:element name="isScriptError" type="xs:boolean"/>
            <xs:element name="isStubError" type="xs:boolean"/>
            <xs:element name="isTestPointError" type="xs:boolean"/>
            <xs:element name="isStackUsageError" type="xs:boolean"/>
            <xs:element name="tests" type="xs:string" minOccurs="0"/>


            <!-- Failed expressions. -->

            <xs:element name="log" minOccurs="0" type="logResultType"/>
            <xs:element name="preConditionResults" minOccurs="0" type="exprDiff"/>
            <xs:element name="assertResults" minOccurs="0" type="exprDiff"/>

            <xs:element name="trace" minOccurs="0"> <xs:complexType> <xs:sequence>
              <xs:element name="files" type="analyzerFiles"/>
            </xs:sequence> </xs:complexType> </xs:element>


            <!-- Coverage results. -->

            <xs:element name="coverage" minOccurs="0"> <xs:complexType> <xs:sequence>
              <xs:element name="files" type="analyzerFiles"/>
              <xs:element name="results" minOccurs="0"><xs:complexType><xs:sequence>
                <xs:element name="item" maxOccurs="unbounded"><xs:complexType><xs:sequence>
                  <xs:element name="funcName" type="xs:string"/>
                  <xs:element name="isError" type="xs:boolean"/>
                  <xs:element name="isBytesExecutedError" type="xs:boolean"/>
                  <xs:element name="isSourceLinesExecutedError" type="xs:boolean"/>
                  <xs:element name="isBranchesExecutedError" type="xs:boolean"/>
                  <xs:element name="isBranchesTakenError" type="xs:boolean"/>
                  <xs:element name="isBranchesNotTakenError" type="xs:boolean"/>
                  <xs:element name="isBranchesBothError" type="xs:boolean"/>
                  <xs:element name="bytesAll" type="xs:integer"/>
                  <xs:element name="sourceLinesAll" type="xs:integer"/>
                  <xs:element name="branchesAll" type="xs:integer"/>

                  <xs:element name="bytesExecuted" type="coverageResult"/>
                  <xs:element name="sourceLinesExecuted" type="coverageResult"/>
                  <xs:element name="branchesExecuted" type="coverageResult"/>
                  <xs:element name="branchesTaken" type="coverageResult"/>
                  <xs:element name="branchesNotTaken" type="coverageResult"/>
                  <xs:element name="branchesBoth" type="coverageResult"/>

                </xs:sequence> </xs:complexType> </xs:element>
              </xs:sequence> </xs:complexType> </xs:element>
            </xs:sequence> </xs:complexType> </xs:element>

            <!-- Profiler results. -->
            <xs:element name="profiler" minOccurs="0"> <xs:complexType> <xs:sequence>
                <xs:element name="files" type="analyzerFiles"/>
                <xs:element name="codeProfiler" minOccurs="0" type="codeProfilerResult"/>
                <xs:element name="dataProfiler" minOccurs="0" type="dataProfilerResult"/>
            </xs:sequence> </xs:complexType> </xs:element>


            <!-- Script output. -->

            <xs:element name="scriptOutput" minOccurs="0" type="keyValuePair"/>

            <!-- Script errors. -->
            <xs:element name="scriptErrors" minOccurs="0" type="keyValuePair"/>


            <!-- Stub results. -->
            <xs:element name="stubResults" minOccurs="0" type="tpResult"/>


            <!-- Test point results. -->
            <xs:element name="testPoints" minOccurs="0" type="tpResult"/>


            <!-- Stack usage. -->
            <xs:element name="stackUsage" minOccurs="0"> <xs:complexType> <xs:sequence>
                <xs:element name="usageBeforeTest" type="xs:integer"/>
                <xs:element name="testIDEAUsage" type="xs:integer"/>
                <xs:element name="applicationUsage" type="xs:integer"/>
                <!-- Optional, may not be specified. -->
                <xs:element name="maxLimit" type="xs:integer" minOccurs='0'/>
            </xs:sequence> </xs:complexType> </xs:element>

      </xs:sequence> </xs:complexType> </xs:element>
    </xs:sequence> </xs:complexType> </xs:element>  <!-- main -->
  </xs:sequence> </xs:complexType></xs:element>  <!-- reportDoc -->


  <!-- iSYSTEM types. -->

  <xs:simpleType name="isysVersion">
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+){0,2}"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="logResult">
    <xs:sequence>
      <xs:element name="item" maxOccurs="unbounded"> <xs:complexType> <xs:sequence>

        <xs:element name="expr" type="xs:string"/>
        <xs:element name="subExpr" minOccurs="0" type="keyValuePair"/>
        <xs:element name="isError" type="xs:boolean"/>

      </xs:sequence> </xs:complexType> </xs:element>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="exprDiff">
    <xs:sequence>
      <xs:element name="item" maxOccurs="unbounded"> <xs:complexType> <xs:sequence>

        <xs:element name="expr" type="xs:string"/>
        <xs:element name="subExpr" minOccurs="0" type="keyValuePair"/>
        <xs:element name="isError" type="xs:boolean"/>

      </xs:sequence> </xs:complexType> </xs:element>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="analyzerFiles">
    <xs:sequence>
      <xs:element name="document" type="xs:string"/>
      <xs:element name="exportFile" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="coverageResult">
    <xs:sequence>
      <xs:element name="expected" type="xs:decimal"/>
      <xs:element name="measuredRel" type="xs:decimal"/>
      <xs:element name="measuredAbs" type="xs:integer" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="codeProfilerResult">
    <xs:sequence>
      <xs:element name="item" maxOccurs="unbounded"> <xs:complexType> <xs:sequence>

            <xs:element name="funcName" type="xs:string"/>

            <xs:element name="isError" type="xs:boolean"/>
            <xs:element name="netTimeStatus" type="profilerResultStatus"/>
            <xs:element name="grossTimeStatus" type="profilerResultStatus"/>
            <xs:element name="callTimeStatus" type="profilerResultStatus"/>
            <xs:element name="periodTimeStatus" type="profilerResultStatus"/>
            <xs:element name="outsideTimeStatus" type="profilerResultStatus"/>
            <xs:element name="hitsStatus" type="profilerResultStatus"/>

            <xs:element name="measuredProfilerResults" type="measuredProfilerResultsType"/>

      </xs:sequence> </xs:complexType> </xs:element>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="dataProfilerResult">
    <xs:sequence>
      <xs:element name="item" maxOccurs="unbounded"> <xs:complexType> <xs:sequence>

            <xs:element name="varName" type="xs:string"/>

            <xs:element name="isError" type="xs:boolean"/>
            <xs:element name="netTimeStatus" type="profilerResultStatus"/>
            <xs:element name="grossTimeStatus" type="profilerResultStatus"/>
            <xs:element name="callTimeStatus" type="profilerResultStatus"/>
            <xs:element name="periodTimeStatus" type="profilerResultStatus"/>
            <xs:element name="outsideTimeStatus" type="profilerResultStatus"/>
            <xs:element name="hitsStatus" type="profilerResultStatus"/>

            <xs:element name="specifiedValue" type="xs:integer" minOccurs="0"/>

            <xs:element name="measuredProfilerResults" type="measuredProfilerResultsType"/>

      </xs:sequence> </xs:complexType> </xs:element>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="measuredProfilerResultsType">
    <xs:sequence>
      <xs:element name="item" maxOccurs="unbounded"> <xs:complexType> <xs:sequence>
            <xs:element name="isError" type="xs:boolean"/>

            <xs:element name="netTimeStatus" type="profilerTimeScope"/>
            <xs:element name="grossTimeStatus" type="profilerTimeScope"/>
            <xs:element name="callTimeStatus" type="profilerTimeScope"/>
            <xs:element name="periodTimeStatus" type="profilerTimeScope"/>
            <xs:element name="outsideTimeStatus" type="profilerTimeScope"/>

            <xs:element name="hits" type="profilerTiming"/>
      </xs:sequence> </xs:complexType> </xs:element>
    </xs:sequence>
  </xs:complexType>


  <xs:simpleType name="profilerResultStatus">
      <xs:restriction base="xs:string">
        <xs:enumeration value="ERR_NONE"/>
        <xs:enumeration value="ERR_MIN"/>
        <xs:enumeration value="ERR_MAX"/>
        <xs:enumeration value="ERR_BOTH"/>
      </xs:restriction>
  </xs:simpleType>


  <xs:complexType name="profilerTiming">
    <!-- Results for variables may be empty, if the varible did not
         change during profiling. -->
    <xs:sequence>
      <xs:element name="expectedLowerBound" type="xs:string" minOccurs="0" />
      <xs:element name="expectedUpperBound" type="xs:string" minOccurs="0" />
      <xs:element name="measuredTime" type="xs:integer" minOccurs="0" />
      <xs:element name="result" type="profilerResultStatus" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="profilerTimeScope">
    <xs:sequence>
      <xs:element name="minTime" type="profilerTiming"/>
      <xs:element name="maxTime" type="profilerTiming"/>
      <xs:element name="averageTime" type="profilerTiming"/>
      <xs:element name="totalTime" type="profilerTiming"/>
      <xs:element name="minStartTime" type="profilerTiming"/>
      <xs:element name="minEndTime" type="profilerTiming"/>
      <xs:element name="maxStartTime" type="profilerTiming"/>
      <xs:element name="maxEndTime" type="profilerTiming"/>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="scriptText">
    <xs:sequence>
      <xs:element name="initTarget" type="xs:string" minOccurs="0"/>
      <xs:element name="initFunc" type="xs:string" minOccurs="0"/>
      <xs:element name="endFunc" type="xs:string" minOccurs="0"/>
      <xs:element name="restoreTarget" type="xs:string" minOccurs="0"/>
      <xs:element name="stub" type="xs:string" minOccurs="0"/>
      <xs:element name="breakpoint" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="tpResult">
    <xs:sequence>
      <xs:element name="item" maxOccurs="unbounded"> <xs:complexType> <xs:sequence>

        <xs:element name="tpIdOrStubbedFunc" type="xs:string"/>
        <xs:element name="location" type="xs:string" minOccurs="0"/>
        <xs:element name="execStatus" type="xs:string"/>
        <xs:element name="hitNo" type="xs:integer"/>
        <xs:element name="stepIdx" type="xs:integer"/>

        <xs:element name="log" minOccurs="0" type="logResultType"/>

        <xs:element name="scriptOut" type="xs:string" minOccurs="0"/>
        <xs:element name="scriptErr" type="xs:string" minOccurs="0"/>
        <xs:element name="exprErrors" type="keyValuePair" minOccurs="0"/>

      </xs:sequence> </xs:complexType> </xs:element>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="groupCoverage">
    <xs:sequence>
      <xs:element name="funcName" type="xs:string"/>
      <xs:element name="isError" type="xs:integer"/>

      <xs:element name="isBytesExecutedError" type="xs:integer"/>
      <xs:element name="isSourceLinesExecutedError" type="xs:integer"/>
      <xs:element name="isBranchesExecutedError" type="xs:integer"/>
      <xs:element name="isBranchesTakenError" type="xs:integer"/>
      <xs:element name="isBranchesNotTakenError" type="xs:integer"/>
      <xs:element name="isBranchesBothError" type="xs:integer"/>

      <xs:element name="bytesAll" type="xs:integer"/>
      <xs:element name="sourceLinesAll" type="xs:integer"/>
      <xs:element name="branchesAll" type="xs:integer"/>

      <xs:element name="bytesExecuted" type="groupCoverageData"/>
      <xs:element name="sourceLinesExecuted" type="groupCoverageData"/>
      <xs:element name="branchesExecuted" type="groupCoverageData"/>
      <xs:element name="branchesTaken" type="groupCoverageData"/>
      <xs:element name="branchesNotTaken" type="groupCoverageData"/>
      <xs:element name="branchesBoth" type="groupCoverageData"/>

    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="groupCoverageData">
    <xs:sequence>
      <xs:element name="expected" type="xs:float"/>
      <xs:element name="measuredRel" type="xs:float"/>
      <xs:element name="measuredAbs" type="xs:integer"/>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="functionStatistics">
    <xs:sequence>
      <xs:element name="item" maxOccurs="unbounded"> <xs:complexType> <xs:sequence>

        <xs:element name="qualFuncName" type="xs:string"/>

        <xs:element name="passedTestCases" type="xs:integer"/>
        <xs:element name="failedTestCases" type="xs:integer"/>
        <xs:element name="errorTestCases" type="xs:integer"/>

        <xs:element name="cvrgBytesAll" type="xs:integer" minOccurs="0"/>
        <xs:element name="cvrgBytesExecuted" type="xs:integer" minOccurs="0"/>

        <xs:element name="cvrgCondAll" type="xs:integer" minOccurs="0"/>
        <xs:element name="cvrgCondFalse" type="xs:integer" minOccurs="0"/>
        <xs:element name="cvrgCondTrue" type="xs:integer" minOccurs="0"/>
        <xs:element name="cvrgCondBoth" type="xs:integer" minOccurs="0"/>

        <xs:element name="cvrgExecutionCount" type="xs:integer" minOccurs="0"/>

      </xs:sequence></xs:complexType></xs:element>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="stringList">
    <xs:sequence>
          <xs:element name="item" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="logResultType">
    <xs:sequence>
          <xs:element name="before" minOccurs="0" type="keyValuePair"/>
          <xs:element name="after" minOccurs="0" type="keyValuePair"/>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="keyValuePair">
    <xs:sequence>
      <xs:element name="pair" maxOccurs="unbounded"> <xs:complexType> <xs:sequence>
        <xs:element name="key" type="xs:string"/>
        <xs:element name="value" type="xs:string"/>
      </xs:sequence> </xs:complexType> </xs:element>
    </xs:sequence>
  </xs:complexType>


</xs:schema>
