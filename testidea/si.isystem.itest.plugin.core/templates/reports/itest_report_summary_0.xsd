<?xml version="1.0" encoding="UTF-8" ?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="https://resources.isystem.com/itest_report"
           xmlns="https://resources.isystem.com/itest_report"
           elementFormDefault="qualified">

  <!--
       This XML schema defines contents of test reports generated by testIDEA.

       Copyright: 2012 iSYSTEM Labs d.o.o.
  -->

  <xs:element name="main"> <xs:complexType> <xs:sequence>
    <xs:element name="reportConfig"> <xs:complexType> <xs:sequence>

      <xs:element name="testIDEAVersion" type="isysVersion"/>
      <xs:element name="winIDEAVersion" type="isysVersion"/>

      <xs:element name="reportContents">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="full"/>
            <xs:enumeration value="errorsOnly"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:element>

      <xs:element name="outFormat" type="xs:string" fixed="xml"/>
      <xs:element name="fileName" type="xs:string"/>
      <xs:element name="iyamlFileName" type="xs:string"/>

      <xs:element name="xsltFull" type="xs:string" minOccurs="0"/>
      <xs:element name="xsltErrors" type="xs:string" minOccurs="0"/>

      <xs:element name="xmlLogoImage" type="xs:string" minOccurs="0" default=""/>
      <xs:element name="xmlReportHeader" type="xs:string" minOccurs="0"  default=""/>

      <xs:element name="csvSeparator" type="xs:string" minOccurs="0"/>
      <xs:element name="isCSVHeaderLine" type="xs:boolean" minOccurs="0" default="false"/>
      <xs:element name="isXLSVerticalHeader" type="xs:boolean" minOccurs="0" default="false"/>
      <xs:element name="isIncludeTestSpec" type="xs:boolean" minOccurs="0" default="false"/>
      <xs:element name="isAbsPathForLinks" type="xs:boolean" minOccurs="0" default="false"/>

      <xs:element name="testInfo" type="keyValuePair" minOccurs="0"/>

    </xs:sequence> </xs:complexType> </xs:element>



    <!-- Report statistics. -->

    <xs:element name="reportStatistic"> <xs:complexType> <xs:sequence>

          <xs:element name="noOfTests" type="xs:integer"/>
          <xs:element name="allErrors" type="xs:integer"/>
          <!-- how many test did not execute because of bug in test
               case or environment or timeout - no test results are available -->
          <xs:element name="exceptionErrors" type="xs:integer"/>
          <!-- how many tests returned reslts which differ from
               expected ones -->
          <xs:element name="failures" type="xs:integer"/>
          <xs:element name="expressionErrors" type="xs:integer"/>
          <xs:element name="coverageErrors" type="xs:integer"/>
          <xs:element name="codeProfilerErrors" type="xs:integer"/>
          <xs:element name="dataProfilerErrors" type="xs:integer"/>
          <xs:element name="scriptErrors" type="xs:integer"/>
          <xs:element name="stubErrors" type="xs:integer"/>
          <xs:element name="testPointErrors" type="xs:integer"/>
          <xs:element name="stackUsageErrors" type="xs:integer"/>
    </xs:sequence> </xs:complexType> </xs:element>


    <!-- Results of test cases. -->

    <xs:element name="testResult" maxOccurs="unbounded"> <xs:complexType> <xs:sequence>

          <!-- Result summary. -->

          <xs:element name="testId" type="xs:string" minOccurs="0"/>
          <xs:element name="function" type="xs:string"/>
          <xs:element name="isError" type="xs:boolean"/>
          <xs:element name="isTargetExceptionError" type="xs:boolean"/>
          <xs:element name="targetExceptionStr" type="xs:string"/>
          <xs:element name="isException" type="xs:boolean"/>
          <xs:element name="exceptionStr" type="xs:string"/>
          <xs:element name="tests" type="xs:string" minOccurs="0"/>


          <!-- Failed expressions. -->

          <xs:element name="log" minOccurs="0" type="logResultType"/>
          <xs:element name="preConditionResults" minOccurs="0" type="exprDiff"/>
          <xs:element name="assertResults" minOccurs="0" type="exprDiff"/>

          <!-- Coverage results. -->

          <xs:element name="coverage" minOccurs="0"> <xs:complexType> <xs:sequence>
            <xs:element name="item" maxOccurs="unbounded"><xs:complexType><xs:sequence>
              <xs:element name="funcName" type="xs:string"/>

              <xs:element name="bytesExecuted" type="coverageResult" minOccurs="0"/>
              <xs:element name="sourceLinesExecuted" type="coverageResult" minOccurs="0"/>
              <xs:element name="branchesExecuted" type="coverageResult" minOccurs="0"/>
              <xs:element name="branchesTaken" type="coverageResult" minOccurs="0"/>
              <xs:element name="branchesNotTaken" type="coverageResult" minOccurs="0"/>
              <xs:element name="branchesBoth" type="coverageResult" minOccurs="0"/>

            </xs:sequence> </xs:complexType> </xs:element>
          </xs:sequence> </xs:complexType> </xs:element>


          <!-- Profiler results. -->
          <xs:element name="codeProfiler" minOccurs="0" type="codeProfilerResult"/>
          <xs:element name="dataProfiler" minOccurs="0" type="dataProfilerResult"/>


          <!-- Script errors. -->

          <xs:element name="scriptErrors" minOccurs="0" type="keyValuePair"/>


          <!-- Stub results. -->
          <xs:element name="stubResults" minOccurs="0" type="tpResult"/>


          <!-- Test point results. -->
          <xs:element name="testPoints" minOccurs="0" type="tpResult"/>


          <!-- Stack usage. -->
          <xs:element name="stackUsage" minOccurs="0"> <xs:complexType> <xs:sequence>
              <xs:element name="usageBeforeTest" type="xs:integer"/>
              <xs:element name="testIDEAUsage" type="xs:integer"/>
              <xs:element name="applicationUsage" type="xs:integer"/>
              <xs:element name="maxLimit" type="xs:integer"/>
          </xs:sequence> </xs:complexType> </xs:element>

    </xs:sequence> </xs:complexType> </xs:element>
  </xs:sequence> </xs:complexType> </xs:element>


  <xs:complexType name="codeProfilerResult">
    <xs:sequence>
      <xs:element name="item" maxOccurs="unbounded"> <xs:complexType> <xs:sequence>

            <xs:element name="funcName" type="xs:string"/>

            <xs:element name="measuredProfilerResults" type="measuredProfilerResultsType"/>

      </xs:sequence> </xs:complexType> </xs:element>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="dataProfilerResult">
    <xs:sequence>
      <xs:element name="item" maxOccurs="unbounded"> <xs:complexType> <xs:sequence>

            <xs:element name="varName" type="xs:string"/>

            <xs:element name="specifiedValue" type="xs:integer" minOccurs="0"/>

            <xs:element name="measuredProfilerResults" type="measuredProfilerResultsType"/>

      </xs:sequence> </xs:complexType> </xs:element>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="measuredProfilerResultsType">
    <xs:sequence>
      <xs:element name="item" maxOccurs="unbounded"> <xs:complexType> <xs:sequence>
            <xs:element name="isError" type="xs:boolean"/>

            <xs:element name="netTimeStatus" type="profilerTimeScope" minOccurs="0"/>
            <xs:element name="grossTimeStatus" type="profilerTimeScope" minOccurs="0"/>
            <xs:element name="callTimeStatus" type="profilerTimeScope" minOccurs="0"/>
            <xs:element name="periodTimeStatus" type="profilerTimeScope" minOccurs="0"/>
            <xs:element name="outsideTimeStatus" type="profilerTimeScope" minOccurs="0"/>

            <xs:element name="hits" type="profilerTiming"/>
      </xs:sequence> </xs:complexType> </xs:element>
    </xs:sequence>
  </xs:complexType>


  <xs:simpleType name="profilerResultStatus">
      <xs:restriction base="xs:string">
        <xs:enumeration value="ERR_NONE"/>
        <xs:enumeration value="ERR_MIN"/>
        <xs:enumeration value="ERR_MAX"/>
        <xs:enumeration value="ERR_BOTH"/>
      </xs:restriction>
  </xs:simpleType>


  <xs:complexType name="profilerTiming">
    <!-- Results for variables may be empty, if the varible did not
         change during profiling. -->
    <xs:sequence>
      <xs:element name="expectedLowerBound" type="xs:string" minOccurs="0" />
      <xs:element name="expectedUpperBound" type="xs:string" minOccurs="0" />
      <xs:element name="measuredTime" type="xs:integer" minOccurs="0" />
      <xs:element name="result" type="profilerResultStatus" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="profilerTimeScope">
    <xs:sequence>
      <xs:element name="minTime" type="profilerTiming" minOccurs="0"/>
      <xs:element name="maxTime" type="profilerTiming" minOccurs="0"/>
      <xs:element name="averageTime" type="profilerTiming" minOccurs="0"/>
      <xs:element name="totalTime" type="profilerTiming" minOccurs="0"/>
      <xs:element name="minStartTime" type="profilerTiming" minOccurs="0"/>
      <xs:element name="minEndTime" type="profilerTiming" minOccurs="0"/>
      <xs:element name="maxStartTime" type="profilerTiming" minOccurs="0"/>
      <xs:element name="maxEndTime" type="profilerTiming" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>



  <!-- iSYSTEM types. -->
  <xs:simpleType name="isysVersion">
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9]+\.[0-9]+\.[0-9]+"/>
    </xs:restriction>
  </xs:simpleType>


  <xs:complexType name="exprDiff">
    <xs:sequence>
      <xs:element name="item" maxOccurs="unbounded"> <xs:complexType> <xs:sequence>

        <xs:element name="expr" type="xs:string"/>
        <xs:element name="subExpr" minOccurs="0" type="keyValuePair"/>
        <xs:element name="isError" type="xs:boolean"/>

      </xs:sequence> </xs:complexType> </xs:element>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="analyzerFiles">
    <xs:sequence>
      <xs:element name="document" type="xs:string"/>
      <xs:element name="exportFile" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="coverageResult">
    <xs:sequence>
      <xs:element name="expected" type="xs:decimal"/>
      <xs:element name="measuredRel" type="xs:decimal"/>
      <xs:element name="measuredAbs" type="xs:integer" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="scriptText">
    <xs:sequence>
      <xs:element name="initTarget" type="xs:string" minOccurs="0"/>
      <xs:element name="initFunc" type="xs:string" minOccurs="0"/>
      <xs:element name="endFunc" type="xs:string" minOccurs="0"/>
      <xs:element name="restoreTarget" type="xs:string" minOccurs="0"/>
      <xs:element name="stub" type="xs:string" minOccurs="0"/>
      <xs:element name="breakpoint" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="tpResult">
    <xs:sequence>
      <xs:element name="item" maxOccurs="unbounded"> <xs:complexType> <xs:sequence>

        <xs:element name="tpIdOrStubbedFunc" type="xs:string"/>
        <xs:element name="hitNo" type="xs:integer"/>
        <xs:element name="stepIdx" type="xs:integer"/>

        <xs:element name="log" minOccurs="0"> <xs:complexType> <xs:sequence>
          <xs:element name="before" minOccurs="0" type="keyValuePair"/>
          <xs:element name="after" minOccurs="0" type="keyValuePair"/>
        </xs:sequence> </xs:complexType> </xs:element>

        <xs:element name="scriptOut" type="xs:string" minOccurs="0"/>
        <xs:element name="scriptErr" type="xs:string" minOccurs="0"/>
        <xs:element name="exprErrors" type="keyValuePair" minOccurs="0"/>

      </xs:sequence> </xs:complexType> </xs:element>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="logResultType">
    <xs:sequence>
          <xs:element name="before" minOccurs="0" type="keyValuePair"/>
          <xs:element name="after" minOccurs="0" type="keyValuePair"/>
    </xs:sequence>
  </xs:complexType>


  <xs:complexType name="keyValuePair">
    <xs:sequence>
      <xs:element name="pair" maxOccurs="unbounded"> <xs:complexType> <xs:sequence>
        <xs:element name="key" type="xs:string"/>
        <xs:element name="value" type="xs:string"/>
      </xs:sequence> </xs:complexType> </xs:element>
    </xs:sequence>
  </xs:complexType>

</xs:schema>
