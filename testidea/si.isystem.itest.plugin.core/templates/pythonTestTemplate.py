#!python

# This script was automatically generated by testIDEA. It
# executes tests from test specification file. You can run it as it
# is, or customize it according to your requirements. You can also
# customize it and use it as a template for future script generation.
# The only section, which is modified by testIDEA when the script
# is used as a template is section between the first two
# comments marked with '#@'. Everything between these to markers is
# removed and replaced with settings from testIDEA.
#
# (c) iSYSTEM AG, Sept. 2011

from __future__ import print_function

import os
import sys
import shutil

import isystem.itest as it
import isystem.connect as ic
import webbrowser as wb
import datetime

class Monitor:
    """
    This is the default monitor class - it is used, if the 'Use Default
    Progress Monitor' check box in testIDEA is checked. Methods of this class
    are called during test execution.
    """
    def __init__(self):
        self.noOfTests = 0
        self.testCount = 0

    def setTestCount(self, noOfTests):
        """
        This method must be called before tests are started.

        noOfTests: contains the number of all tests to be executed.
        """
        self.noOfTests = noOfTests

    def isCanceled(self):
        """
        If you want to stop tests, this method should return True.
        """
        return False

    def subTask(self, taskDesc):
        """
        This method receives test description, which consists of test ID
        and the name of the function under test.
        """
        print(taskDesc)
        sys.stdout.flush()  # make output visible immediately in Jenkins console

    def setTestInfo(self, **kwargs):
        """
        This method is optional. If defined, it is called immediately after
        method subTask(). 'kwargs' contains arg 'testCase' with value of type
        CTetSpecification, which contains test case to be executed.
        """
        print("    Description: ", kwargs['testCase'].getDescription())
        sys.stdout.flush()

    def worked(self, count):
        """
        This method is called after each test execution.
        """
        self.testCount += count
        print('    Executed test: ' + str(self.testCount) + ' / ' + str(self.noOfTests))
        sys.stdout.flush()

    def initAction(self, actionName):
        print('Executing init action: ', actionName)
        sys.stdout.flush()

    def diagram(self, scriptArgs):
        """
        This method is called when scripts for diagrams are called.
        """
        print('    Creating diagram: ', scriptArgs)
        sys.stdout.flush()


def addCustomInitAction(customInitActions, coreId, action, actionParams):
    """
    Creates and adds target initializarion action to the given list.
    Parameters:
    customInitActions - list used to store new action
    coreId - id of the core as defined in testIDEA project properties
    action - one of ic.CInitSequenceAction.EIA... actions
    actionParams - list of strings used as parameters of the action, may be None
    """

    initAction = ic.CInitSequenceAction(None)
    initAction.setCoreId(coreId)
    initAction.setAction(action)
    seqAdapter = ic.CSequenceAdapter(initAction,
                                     ic.CInitSequenceAction.E_INIT_SEQ_PARAMS,
                                     False)
    if actionParams:
        for param in actionParams:
            seqAdapter.add(-1, param)

    customInitActions.append(initAction)


def setCoreIds(testEnvConfig, coreIds):
    """
    Copies coreIDs from Python list to C++ class.
    Parameters:
    testEnvConfig - instance of CTestEnvironmentConfig
    coreIds - python list, which contains core IDs to be copied to testEnvConfig
    """
    for coreId in coreIds:
        coreIdsSeq = ic.CSequenceAdapter(testEnvConfig,
                                         ic.CTestEnvironmentConfig.E_SECTION_CORE_IDS,
                                         False)
        coreIdsSeq.add(-1, coreId)


customReportConfig = ic.CTestReportConfig()
TARGET_STOP_TIMEOUT = 30000  # this constant defines how long to wait for
                             # the target to stop on initialization or testing

# Values of the following variables are set according to testIDEA
# script generation dialog.
#@ Start of test configuration. DO NOT REMOVE THIS LINE FROM TEMPLATE


progressMonitor = Monitor()

testSpecificationFile = r"testIDEADemo.iyaml"

isUseCustomWinIDEAWorkspace = False
winIDEAWorkspace = r""
isUseCustomInitSequence = False
initBeforeTest = False
customInitActions = []
addCustomInitAction(customInitActions, '', ic.CInitSequenceAction.EIALoadSymbolsOnly, [])
addCustomInitAction(customInitActions, '', ic.CInitSequenceAction.EIAReset, [""])
addCustomInitAction(customInitActions, '', ic.CInitSequenceAction.EIARun, ["main"])
addCustomInitAction(customInitActions, '', ic.CInitSequenceAction.EIADeleteAllBreakpoints, [""])
coreIDs = ["core0"]

filterId = None
iconnectDllPath = r""
isSaveTestReportAsTestIDEA = True
isSaveTestReportAsJUnit = True
isExportForCobertura = True
exportForCoberturaTrdFName = r"main.trd"
isUseCustomReportConfig = False
isOpenReportInBrowser = False
customReportConfig.setReportContents(ic.CTestReportConfig.RCONFIG_FULL)
customReportConfig.setOutputFormat(ic.CTestReportConfig.FMT_XML)
customReportConfig.setFileName(r"'reportFull.xml'")
customReportConfig.setXsltForFullReport(r"'<built-in> isystemTestReport.xslt'")
customReportConfig.setXsltForErrors(r"''")
customReportConfig.setIncludeTestSpec(True)

#@ End of test configuration. DO NOT REMOVE THIS LINE FROM TEMPLATE



# The following items are not customizable in testIDEA, but you can
# configure them directly in the generated script.
isPrintResultsToStdOut = True
isDebugMode = False


# Test functions

def isSameFile(path1, path2):
    return  (os.path.normcase(os.path.abspath(path1)) ==
             os.path.normcase(os.path.abspath(path2)))


def refreshSymbolsAndGroups(mccMgr, testBench, envConfig):
    testBench.getFilterController().clear(); # indicate refresh is needed
    testBench.refreshSymbolsAndGroupsIfEmpty(mccMgr, envConfig)


def execGetReportCustomDataScript(testCase, extensionObject, reportConfig):
    extMethod = ic.CScriptConfig.EXT_METHOD_GET_TEST_REPORT_CUSTOM_DATA

    res = testCase.execCustomScript(extensionObject, extMethod, reportConfig)
    if res:
        # example for res = 'ver: 12.3\nfile: d:\tmp'
        lines = res.split('\n')
        for line in lines:
            k, v = line.split(':', 1) # keys may not have ':', values may
            reportConfig.addUserInfo(k, v)



def execAfterReportSaveScript(testCase, extensionObject, reportConfig):
    extMethod = ic.CScriptConfig.EXT_METHOD_AFTER_REPORT_SAVE
    testCase.execCustomScript(extensionObject, extMethod, reportConfig)


def replaceTestReportHostVars(mccMgr, testSpecFile, reportConfig):
    ideCtrl = mccMgr.getCIDEController('')
    # reportConfig gets changed
    ic.CTestBench.addUserInfoToReportConfig(reportConfig,
                                            testSpecFile,
                                            ideCtrl.getPath(ic.CIDEController.WORKSPACE_DIR),
                                            ideCtrl.getPath(ic.CIDEController.WORKSPACE_FILE_NAME),
                                            ideCtrl.getDefaultDownloadFile())


def saveResults(mccMgr, testCase, extensionObject, isSaveToFile, isPrintToStdOut, reportConfig):
    """
    This method saves test results to report file the same way as
    testIDEA would do. In addition this method also prints the most
    important information to stdout. If report is saved to XML file
    and built-in XSLT was used, this method also copies the XSLT used
    in report to the same folder as used by the report file.
    """

    testResults = testCase.getTestResultsContainer();

    execGetReportCustomDataScript(testCase, extensionObject, reportConfig)

    copyXsltAndCssToReportDir(reportConfig, isSaveToFile)

    reportSaveErrorDesc = ""
    if (isSaveToFile):
        reportFileName = reportConfig.getFileName()
        if reportFileName == None  or  not reportFileName:
            reportSaveErrorDesc = \
            """
ERROR: Report file name is not specified, so test report was not saved!"
       Define report file name in testIDEA 'File | Save test report' dialog,"
       and save it (File | Save), or in custom report configuration when"
       generating this script!"
"""
        else:
            ic.CTestBench.saveTestResults(testResults, reportConfig);

    execAfterReportSaveScript(testCase, extensionObject, reportConfig)

    htmlFName = it.createHtmlReport(mccMgr, reportConfig)

    if isPrintToStdOut:
        # serialize result to string for printing to stdout
        errStream = ic.CStringStream()
        stringEmitter = ic.EmitterFactory.createYamlEmitter(errStream)
        stringEmitter.startStream()

        # write statistics of test results
        reportStats = testCase.getReportStatistics()

        stringEmitter.startDocument(False);
        reportStats.serialize(stringEmitter);
        stringEmitter.endDocument(False);

        # write reports
        numErrors = 0
        testResults.resetTestResultIterator()
        while testResults.hasNextTestResult():
            result = testResults.nextTestResult()
            if result.isError():
                numErrors += 1
                if isPrintToStdOut:
                    stringEmitter.startDocument(False)
                    result.serializeErrorsOnly(stringEmitter, None)
                    stringEmitter.endDocument(False)

        stringEmitter.endStream()
        print(errStream.getString())

        if numErrors == 0:
            print("OK, no errors in test execution detected!")
        else:
            print('Number of errors in  test execution: ' + str(numErrors))

        print(reportSaveErrorDesc)

    return htmlFName


def copyXsltAndCssToReportDir(reportConfig, isSaveToFile):
    # copy XSLT and CSS from dir of this script to report dir, but
    # only if they are built-in files. For user created XSLT and/or CSS
    # users have to take care - either specify abs path or copy manually
    isXMLReport = reportConfig.getOutputFormat() == ic.CTestReportConfig.FMT_XML
    if isSaveToFile and isXMLReport:
        reportFileName = reportConfig.getFileName()
        isEmbedXsltCss = reportConfig.isEmbedXsltCss()

        xsltFileName = reportConfig.getSelectedXsltFileName();
        copyResource2ReportDir(xsltFileName, reportFileName, isEmbedXsltCss)

        cssFileName = reportConfig.getCssFile()
        copyResource2ReportDir(cssFileName, reportFileName, isEmbedXsltCss)


def copyResource2ReportDir(resourceFileName, reportFileName, isEmbedXsltCss):

        # remove prefix for stylesheet files built into testIDEA
        scriptDir = os.path.dirname(__file__)
        reportDir = os.path.dirname(reportFileName)

        if resourceFileName.startswith(it.XSLT_BUILT_IN_PREFIX):
            resourceFileName = resourceFileName[len(it.XSLT_BUILT_IN_PREFIX):].strip();

            destFile = os.path.join(reportDir, resourceFileName)

            resourceFileName = os.path.join(scriptDir, resourceFileName)

            if isEmbedXsltCss:
                resourceFileName += ic.TMP_XSLT_CSS_EXTENSION
                destFile += ic.TMP_XSLT_CSS_EXTENSION

            if not os.path.exists(resourceFileName):
                raise Exception("Tests were executed, and report weas saved, but " + \
                                "there is no resource file '" + resourceFileName +
                                "' in script folder for viewing reports in browser. " + \
                                "If you have copied the script to other folder, copy also " + \
                                "XSLT and CSS files, or regenerate the script with testIDEA.")

            if not os.path.exists(destFile) or not isSameFile(destFile, resourceFileName):
                shutil.copyfile(resourceFileName, destFile)


def runTestMain(mccMgr, testBench, testFilter, testEnvConfig, testCase, extensionObject):
    ideCtrl = mccMgr.getCIDEController('')

    reportCfg = testBench.getTestReportConfig(False)
    reportCfg.setWinIDEAVersion(ideCtrl.getWinIDEAVersion().toString());

    print('Reading symbols ... ')
    sys.stdout.flush()
    refreshSymbolsAndGroups(mccMgr, testBench, testEnvConfig)
    print('Symbols read.\n')
    sys.stdout.flush()

    testCaseTargetInitConfig = testEnvConfig.getTestCaseTargetInitConfig(False)
    if not testCaseTargetInitConfig.isEmpty():
        testCase.setTestCaseInitConfig(testCaseTargetInitConfig)

    rootTestSpec = testBench.getTestSpecification(False)
    # Root test specification is only a container - mark it as not executable
    rootTestSpec.setRunFlag(False)

    if progressMonitor != None:
        progressMonitor.setTestCount(testCase.countExecutableTests(rootTestSpec,
                                                                   testBench.getFilterController(),
                                                                   testFilter,
                                                                   extensionObject))

    # run tests
    testCase.runTests(rootTestSpec, extensionObject, progressMonitor,
                      testFilter, isDebugMode, testEnvConfig, testBench)

    # restore target state
    testCase.restoreState()



def testOneIYamlFile(testSpecFile):
    global winIDEAWorkspace

    # Load test spec from file
    testBench = ic.CTestBench.load(testSpecFile)

    if isUseCustomInitSequence:
        testEnvConfig = ic.CTestEnvironmentConfig(None)
        testEnvConfig.setAlwaysRunInitSeqBeforeRun(initBeforeTest)

        setCoreIds(testEnvConfig, coreIDs)

        initActions = testEnvConfig.getTestBaseList(ic.CTestEnvironmentConfig.E_SECTION_INIT_SEQUENCE,
                                                    False)
        for action in customInitActions:
            initActions.add(-1, action)
    else:
        testEnvConfig = testBench.getTestEnvironmentConfig(False)


    if not isUseCustomWinIDEAWorkspace:
        winIDEAWorkspace = testBench.getTestEnvironmentConfig(False).getWorkspace()

    print('>>>>===  winIDEAWorkspace = ', winIDEAWorkspace)
    sys.stdout.flush()

    mccMgr = it.connectToPrimaryCore(testEnvConfig, winIDEAWorkspace, None,
                                     iconnectDllPath)

    isysDirs = it.getISysDirs(mccMgr, testSpecFile, testBench)

    dbg = mccMgr.getCDebugFacade('')

    extensionObject = createExtensionObject(mccMgr)

    testFilter = None
    if filterId != None:
        testFilter = testBench.getTestFilter(filterId)
        if testFilter == None:
            raise Exception("Filter with id '" + filterId + "' not found!")

    print('Initializing target...')
    sys.stdout.flush()

    testCase = it.PTestCase(mccMgr)
    testCase.setISysDirs(isysDirs)

    testCase.executeInitSequence(testEnvConfig,
                                 mccMgr,
                                 TARGET_STOP_TIMEOUT,
                                 extensionObject,
                                 progressMonitor)

    targetStatus =  dbg.getCPUStatus()
    if not targetStatus.isStopped():
        raise Exception("Target must be in stopped state before test. Please init " +
                        "the target manually\nor configure 'Run configuration' " +
                        "in test specification file.")

    print('Target initialized.\n')
    sys.stdout.flush()

    runTestMain(mccMgr, testBench, testFilter, testEnvConfig, testCase, extensionObject)

    # save results
    if isUseCustomReportConfig:
        reportConfig = customReportConfig
    else:
        reportConfig = testBench.getTestReportConfig(False)

    replaceTestReportHostVars(mccMgr, testSpecFile, reportConfig)
    reportFileName = reportConfig.getFileName()

    if isSaveTestReportAsTestIDEA or isPrintResultsToStdOut:

        htmlFName = saveResults(mccMgr, testCase, extensionObject, isSaveTestReportAsTestIDEA,
                                isPrintResultsToStdOut, reportConfig)

        browserFName = reportFileName
        if htmlFName:
            browserFName = htmlFName

        # open report in browser
        if isSaveTestReportAsTestIDEA and isOpenReportInBrowser and browserFName:
            wb.open_new_tab(browserFName)

    if isSaveTestReportAsJUnit:
        reportFileNameWOExt, ext = os.path.splitext(reportFileName)
        jUnitFName = reportFileNameWOExt + '.junit' + ext

        testCase.saveTestResultsAsJUnit(jUnitFName, 'testIDEATestSuite')

    if isExportForCobertura:
        coreId = '' # change this manually if it is not the default core
        it.exportForCobertura(mccMgr, '', exportForCoberturaTrdFName)


def main():
    testOneIYamlFile(testSpecificationFile)


if __name__ == '__main__':
    main()
